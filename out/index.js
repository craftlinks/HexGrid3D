async function x(){let k=0.02,N={dt:k,n:16000,frictionFactor:Math.pow(0.5,k/0.05),rMax:0.4,m:12,opacity:100,particleSize:3.5};const Q=await navigator.gpu?.requestAdapter(),E=navigator?.gpu.getPreferredCanvasFormat(Q);let y=await Q?.requestDevice();if(!y){fail("need a browser that supports WebGPU");return}else console.log("WebGPU is supported");y.lost.then((M)=>{if(console.error(`WebGPU device was lost: ${M.message}`),y=null,M.reason!=="destroyed")x()});var T=document.querySelector("canvas");const I=await fetch("./shaders/plife_compute.wgsl").then((M)=>M.text()),J=await fetch("./shaders/render.wgsl").then((M)=>M.text());let z=[];for(let M=0;M<N.m;M++){const q=[];for(let A=0;A<N.m;A++)M==A?q.push(1):M==(A+1)%N.m?q.push(0.1):q.push(0);z.push(q)}const U=new Float32Array(z.flat());console.log(U);const $=new Uint32Array(N.n),X=new Float32Array(N.n*4),Z=new Float32Array(N.n*3);for(let M=0;M<N.n;M++)$[M]=M%N.m,X[4*M]=Math.random()*2-1,X[4*M+1]=Math.random()*2-1,X[4*M+2]=Math.random()*2-1,X[4*M+3]=Math.random()*2-1,Z[3*M]=0,Z[3*M+1]=0,Z[3*M+2]=0;const j=y.createBuffer({label:"params buffer",size:Object.keys(N).length*4,usage:GPUBufferUsage.COPY_DST|GPUBufferUsage.UNIFORM}),w=y.createBuffer({label:"F buffer",size:N.m*N.m*4,usage:GPUBufferUsage.STORAGE|GPUBufferUsage.COPY_DST}),F=y.createBuffer({label:"colors buffer",size:N.n*4,usage:GPUBufferUsage.STORAGE|GPUBufferUsage.COPY_DST}),S=y.createBuffer({label:"velocities buffer",size:N.n*3*4,usage:GPUBufferUsage.STORAGE|GPUBufferUsage.COPY_DST}),H=y.createBuffer({label:"positions buffer",size:N.n*4*4,usage:GPUBufferUsage.VERTEX|GPUBufferUsage.STORAGE|GPUBufferUsage.COPY_DST|GPUBufferUsage.COPY_SRC}),n=y.createBuffer({label:"Position buffer result",size:N.n*4*4,usage:GPUBufferUsage.COPY_DST|GPUBufferUsage.MAP_READ});y.queue.writeBuffer(H,0,X),y.queue.writeBuffer(S,0,Z),y.queue.writeBuffer(F,0,$),y.queue.writeBuffer(w,0,U);function h(){y.queue.writeBuffer(j,0,new Float32Array(Object.values(N)))}h();const C=y.createBuffer({size:32,usage:GPUBufferUsage.VERTEX|GPUBufferUsage.COPY_DST});y.queue.writeBuffer(C,0,new Float32Array([-1,-1,1,-1,-1,1,1,1]));const W=new Uint8Array(4*N.n);for(let M=0;M<N.n;M+=1){const q=t(360/N.m*$[M],100,50);W[M*4]=q[0],W[M*4+1]=q[1],W[M*4+2]=q[2],W[M*4+3]=Math.floor(N.opacity/100*255)}const D=y.createBuffer({size:W.byteLength,usage:GPUBufferUsage.VERTEX|GPUBufferUsage.COPY_DST});y.queue.writeBuffer(D,0,W);const V=y.createBuffer({size:16,usage:GPUBufferUsage.UNIFORM|GPUBufferUsage.COPY_DST}),b=y.createShaderModule({label:"Particle Life Compute Shader",code:I}),R=y.createShaderModule({label:"render shader",code:J}),L=y.createComputePipeline({label:"compute velocities pipeline",layout:"auto",compute:{module:b,entryPoint:"update_velocities"}}),l=y.createComputePipeline({label:"update positions pipeline",layout:"auto",compute:{module:b,entryPoint:"update_positions"}}),g=y.createRenderPipeline({layout:"auto",vertex:{module:R,entryPoint:"vs",buffers:[{arrayStride:8,attributes:[{shaderLocation:0,format:"float32x2",offset:0}]},{arrayStride:4,stepMode:"instance",attributes:[{shaderLocation:1,format:"unorm8x4",offset:0}]},{arrayStride:16,stepMode:"instance",attributes:[{shaderLocation:2,format:"float32x4",offset:0}]}]},fragment:{module:R,entryPoint:"fs",targets:[{format:E,blend:{color:{srcFactor:"one",dstFactor:"one-minus-src-alpha"},alpha:{srcFactor:"one",dstFactor:"one-minus-src-alpha"}}}]},primitive:{topology:"triangle-strip",stripIndexFormat:"uint32"}}),G=y.createBindGroup({layout:L.getBindGroupLayout(0),entries:[{binding:0,resource:{buffer:F}},{binding:1,resource:{buffer:S}},{binding:2,resource:{buffer:H}},{binding:3,resource:{buffer:w}}]}),_=y.createBindGroup({layout:L.getBindGroupLayout(1),entries:[{binding:0,resource:{buffer:j}}]}),B=y.createBindGroup({layout:g.getBindGroupLayout(0),entries:[{binding:0,resource:{buffer:V}}]}),Y=v(),P={colorAttachments:[{view:Y.getCurrentTexture().createView(),loadOp:"clear",storeOp:"store",clearValue:[0,0,0,1]}]};function u(M){const q=Y.canvas.width/Y.canvas.height;y.queue.writeBuffer(V,0,new Float32Array([T.width,T.height,N.particleSize,q]));const A=M.beginComputePass();A.setPipeline(L),A.setBindGroup(0,G),A.setBindGroup(1,_),A.dispatchWorkgroups(N.n/64),A.end();const K=M.beginComputePass();K.setPipeline(l),K.setBindGroup(0,G),K.setBindGroup(1,_),K.dispatchWorkgroups(N.n/64),K.end(),P.colorAttachments[0].view=Y.getCurrentTexture().createView();const O=M.beginRenderPass(P);O.setPipeline(g),O.setVertexBuffer(0,C),O.setVertexBuffer(1,D),O.setVertexBuffer(2,H),O.setBindGroup(0,B),O.draw(4,N.n),O.end()}async function f(M,q=1){const A=y.createCommandEncoder({label:"our command encoder"});for(let O=0;O<q;++O)u(A);const K=A.finish();y.queue.submit([K])}function m(M){let q=window.devicePixelRatio||1,A=M.getBoundingClientRect();M.width=A.width*q,M.height=A.height*q;let K=M.getContext("webgpu");return K.configure({device:y,format:E}),K}function v(){return m(document.querySelector("canvas"))}while(!0)await f(Y),await new Promise(requestAnimationFrame)}var t=function(k,N,Q){N/=100,Q/=100;let E=(1-Math.abs(2*Q-1))*N,y=E*(1-Math.abs(k/60%2-1)),T=Q-E/2,I=0,J=0,z=0;if(0<=k&&k<60)I=E,J=y,z=0;else if(60<=k&&k<120)I=y,J=E,z=0;else if(120<=k&&k<180)I=0,J=E,z=y;else if(180<=k&&k<240)I=0,J=y,z=E;else if(240<=k&&k<300)I=y,J=0,z=E;else if(300<=k&&k<360)I=E,J=0,z=y;return I=Math.round((I+T)*255),J=Math.round((J+T)*255),z=Math.round((z+T)*255),[I,J,z]};x();
