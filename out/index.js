async function w(){const b=await(await navigator.gpu?.requestAdapter())?.requestDevice();if(!b){fail("need a browser that supports WebGPU");return}else console.log("WebGPU is supported");var z=document.querySelector("canvas");const q=await fetch("./shaders/lenia_compute.wgsl").then((D)=>D.text()),N=b.createBuffer({size:Object.keys(E).length*4,usage:GPUBufferUsage.COPY_DST|GPUBufferUsage.UNIFORM}),U=b.createBuffer({label:"Rval buffer",size:E.point_n*4,usage:GPUBufferUsage.STORAGE|GPUBufferUsage.COPY_SRC}),V=b.createBuffer({label:"Uval buffer",size:E.point_n*4,usage:GPUBufferUsage.STORAGE|GPUBufferUsage.COPY_SRC}),X=b.createBuffer({label:"Rgrad buffer",size:E.point_n*2*4,usage:GPUBufferUsage.STORAGE|GPUBufferUsage.COPY_SRC}),Y=b.createBuffer({label:"Ugrad buffer",size:E.point_n*2*4,usage:GPUBufferUsage.STORAGE|GPUBufferUsage.COPY_SRC}),A=b.createBuffer({label:"Position buffer",size:E.point_n*2*4,usage:GPUBufferUsage.STORAGE|GPUBufferUsage.COPY_SRC|GPUBufferUsage.COPY_DST}),k=b.createBuffer({label:"Position buffer result",size:E.point_n*2*4,usage:GPUBufferUsage.COPY_DST|GPUBufferUsage.MAP_READ});{const D=new Float32Array(E.point_n*2);for(let y=0;y<E.point_n;++y)D[y*2]=(Math.random()-0.5)*48,D[y*2+1]=(Math.random()-0.5)*48;b.queue.writeBuffer(A,0,D)}b.queue.writeBuffer(N,0,new Float32Array(Object.values(E)));const H=b.createShaderModule({label:"Lenia Compute Shader",code:q}),Z=b.createComputePipeline({label:"reset pipeline",layout:"auto",compute:{module:H,entryPoint:"reset_buffers"}}),I=b.createComputePipeline({label:"compute fields pipeline",layout:"auto",compute:{module:H,entryPoint:"compute_fields"}}),$=b.createComputePipeline({label:"update positions pipeline",layout:"auto",compute:{module:H,entryPoint:"update_positions"}}),J=b.createBindGroup({layout:I.getBindGroupLayout(0),entries:[{binding:0,resource:{buffer:U}},{binding:1,resource:{buffer:V}},{binding:2,resource:{buffer:X}},{binding:3,resource:{buffer:Y}},{binding:4,resource:{buffer:A}}]}),K=b.createBindGroup({layout:I.getBindGroupLayout(1),entries:[{binding:0,resource:{buffer:N}}]});async function C(){const D=b.createCommandEncoder({label:"our command encoder"}),y=D.beginComputePass();y.setPipeline(Z),y.setBindGroup(0,J),y.setBindGroup(1,K),y.dispatchWorkgroups(E.point_n/64),y.setPipeline(I),y.setBindGroup(0,J),y.setBindGroup(1,K),y.dispatchWorkgroups(E.point_n/64),y.setPipeline($),y.setBindGroup(0,J),y.setBindGroup(1,K),y.dispatchWorkgroups(E.point_n/64),y.end(),D.copyBufferToBuffer(A,0,k,0,k.size);const L=D.finish();b.queue.submit([L])}async function S(D,y=100,L=5){for(let W=0;W<L;++W)await C();await k.mapAsync(GPUMapMode.READ);const O=new Float32Array(k.getMappedRange()),{width:M,height:Q}=D.canvas;D.resetTransform(),D.clearRect(0,0,M,Q),D.translate(M/2,Q/2);const T=M/y;D.scale(T,T),D.lineWidth=0.05;for(let W=0;W<E.point_n;++W){D.beginPath();const F=O[W*2],G=O[W*2+1];D.arc(F,G,0.075,0,Math.PI*2),D.stroke()}k.unmap()}const g=h();while(!0)await S(g),await new Promise(requestAnimationFrame)}var R=function(j){let b=window.devicePixelRatio||1,z=j.getBoundingClientRect();j.width=z.width*b,j.height=z.height*b;let q=j.getContext("2d");return q.scale(b,b),q},h=function(){return R(document.querySelector("canvas"))},E={mu_k:4,sigma_k:1,w_k:0.022,mu_g:0.6,sigma_g:0.15,c_rep:1,dt:0.02,point_n:3200};w();
