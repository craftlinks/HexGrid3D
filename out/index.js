var A={mu_k:4,sigma_k:1,w_k:0.022,mu_g:0.6,sigma_g:0.15,c_rep:1,dt:0.02,point_n:12800};async function G(){const b=await(await navigator.gpu?.requestAdapter())?.requestDevice();if(!b){fail("need a browser that supports WebGPU");return}else console.log("WebGPU is supported");var J=document.querySelector("canvas");const D=await fetch("./shaders/lenia_compute.wgsl").then((I)=>I.text()),W=b.createBuffer({label:"Rval buffer",size:A.point_n*4,usage:GPUBufferUsage.STORAGE|GPUBufferUsage.COPY_SRC}),X=b.createBuffer({label:"Uval buffer",size:A.point_n*4,usage:GPUBufferUsage.STORAGE|GPUBufferUsage.COPY_SRC}),Y=b.createBuffer({label:"Rgrad buffer",size:A.point_n*2*4,usage:GPUBufferUsage.STORAGE|GPUBufferUsage.COPY_SRC}),Z=b.createBuffer({label:"Ugrad buffer",size:A.point_n*2*4,usage:GPUBufferUsage.STORAGE|GPUBufferUsage.COPY_SRC}),K=b.createBuffer({label:"Position buffer",size:A.point_n*2*4,usage:GPUBufferUsage.STORAGE|GPUBufferUsage.COPY_SRC|GPUBufferUsage.COPY_DST}),q=b.createBuffer({label:"Position buffer result",size:A.point_n*2*4,usage:GPUBufferUsage.COPY_DST|GPUBufferUsage.MAP_READ});{const I=new Float32Array(A.point_n*2);for(let E=0;E<A.point_n;++E)I[E]=(Math.random()-0.5)*12,I[E+1]=(Math.random()-0.5)*12;b.queue.writeBuffer(K,0,I)}const M=b.createShaderModule({label:"Lenia Compute Shader",code:D}),N=b.createComputePipeline({label:"compute fields pipeline",layout:"auto",compute:{module:M,entryPoint:"compute_fields"}}),$=b.createComputePipeline({label:"update positions pipeline",layout:"auto",compute:{module:M,entryPoint:"update_positions"}}),O=b.createBindGroup({layout:N.getBindGroupLayout(0),entries:[{binding:0,resource:{buffer:W}},{binding:1,resource:{buffer:X}},{binding:2,resource:{buffer:Y}},{binding:3,resource:{buffer:Z}},{binding:4,resource:{buffer:K}}]});async function g(){const I=b.createCommandEncoder({label:"our command encoder"}),E=I.beginComputePass();E.setPipeline(N),E.setBindGroup(0,O),E.dispatchWorkgroups(A.point_n/64),E.end();const k=I.beginComputePass();k.setPipeline($),k.setBindGroup(0,O),k.dispatchWorkgroups(A.point_n/64),k.end(),I.copyBufferToBuffer(K,0,q,0,q.size);const H=I.finish();b.queue.submit([H])}async function y(I,E=45,k=5){for(let T=0;T<k;++T)await g();await q.mapAsync(GPUMapMode.READ);const H=new Float32Array(q.getMappedRange()),{width:L,height:Q}=I.canvas;I.resetTransform(),I.clearRect(0,0,L,Q),I.translate(L/2,Q/2);const V=L/E;I.scale(V,V),I.lineWidth=0.02;for(let T=0;T<A.point_n;++T){I.beginPath();const C=H[T*2],S=H[T*2+1];I.arc(C,S,0.03,0,Math.PI*2),I.stroke()}q.unmap()}const z=w();while(!0)await y(z),await new Promise(requestAnimationFrame)}var U=function(j){let b=window.devicePixelRatio||1,J=j.getBoundingClientRect();j.width=J.width*b,j.height=J.height*b;let D=j.getContext("2d");return D.scale(b,b),D},w=function(){return U(document.querySelector("canvas"))};G();
